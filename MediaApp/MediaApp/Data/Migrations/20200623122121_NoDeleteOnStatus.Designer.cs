// <auto-generated />
using System;
using MediaApp.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediaApp.Data.Migrations
{
    [DbContext(typeof(MediaDb))]
    [Migration("20200623122121_NoDeleteOnStatus")]
    partial class NoDeleteOnStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediaApp.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MediaApp.Domain.FilmGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FilmGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Documentary"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Romantic"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Action"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Science-fiction"
                        });
                });

            modelBuilder.Entity("MediaApp.Domain.MediaComment", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasKey("MediaId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("MediaComments");
                });

            modelBuilder.Entity("MediaApp.Domain.MediaReview", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("MediaId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Mediareviews");
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Media");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Media");
                });

            modelBuilder.Entity("MediaApp.Domain.MusicGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AudioGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pop"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Rock"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dance"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Classical"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Elevator music"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Country"
                        },
                        new
                        {
                            Id = 7,
                            Description = "K-pop"
                        });
                });

            modelBuilder.Entity("MediaApp.Domain.PodcastGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PodcastGenre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "History"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Religious"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sports"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Comedy"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Crime"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Technology"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Environment/Science"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Interview"
                        },
                        new
                        {
                            Id = 10,
                            Description = "News & Politics"
                        });
                });

            modelBuilder.Entity("MediaApp.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MediaApp.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Experienced"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Want to experience"
                        });
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Film", b =>
                {
                    b.HasBaseType("MediaApp.Domain.MediaTypes.Media");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasIndex("GenreId");

                    b.HasDiscriminator().HasValue("Film");
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Music", b =>
                {
                    b.HasBaseType("MediaApp.Domain.MediaTypes.Media");

                    b.Property<int>("GenreId")
                        .HasColumnName("Music_GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Singer")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GenreId");

                    b.HasDiscriminator().HasValue("Music");
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Podcast", b =>
                {
                    b.HasBaseType("MediaApp.Domain.MediaTypes.Media");

                    b.Property<int>("GenreId")
                        .HasColumnName("Podcast_GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Organisation")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GenreId");

                    b.HasDiscriminator().HasValue("Podcast");
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Series", b =>
                {
                    b.HasBaseType("MediaApp.Domain.MediaTypes.Media");

                    b.Property<string>("Broadcaster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnName("Series_GenreId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfEpisodes")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeasons")
                        .HasColumnType("int");

                    b.HasIndex("GenreId");

                    b.HasDiscriminator().HasValue("Series");
                });

            modelBuilder.Entity("MediaApp.Domain.MediaComment", b =>
                {
                    b.HasOne("MediaApp.Domain.Comment", "Comment")
                        .WithMany("MediaComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaApp.Domain.MediaTypes.Media", "Media")
                        .WithMany("MediaComments")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaApp.Domain.MediaReview", b =>
                {
                    b.HasOne("MediaApp.Domain.MediaTypes.Media", "Media")
                        .WithMany("MediaReviews")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaApp.Domain.Review", "Review")
                        .WithMany("MediaReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Media", b =>
                {
                    b.HasOne("MediaApp.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Film", b =>
                {
                    b.HasOne("MediaApp.Domain.FilmGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Music", b =>
                {
                    b.HasOne("MediaApp.Domain.MusicGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Podcast", b =>
                {
                    b.HasOne("MediaApp.Domain.PodcastGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaApp.Domain.MediaTypes.Series", b =>
                {
                    b.HasOne("MediaApp.Domain.FilmGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
